#!/bin/bash

set -o noglob

PIDS=""
RESULT=0

#DEBUG=true
#VERBOSE=true

function ini_get_sections {
	local INI_FILE=$1
	readarray -t array < <(grep '^\[' $INI_FILE | uniq | tr -d '\[' | tr -d '\]')
	local result=$(declare -p array)
	echo "${result#*=}"
}

function ini_get_value {
	local INT_FILE=$1
	local SECTION=$2
	local KEY=$3
	cat $INT_FILE				| `# read all from the config file`				\
	sed -n -e "/\[$SECTION\]/,\$p"		| `# output all the rest from the desired section matched`	\
	tail -n +2				| `# delete the first line (the desired section)`		\
	sed -e "/^\[.*\]/q"			| `# find the next SECTION and discard all the rest from there`	\
	grep "^[[:space:]]*$KEY[[:space:]]*\="	| `# find all lines with desired KEY separated by equal sign.`	\
						  `# spaces around key name are not affected`			\
	tail -n 1				| `# choose the last`						\
	awk -F= '{print $2}'			| `# separate by the equal sign, get the value of 2nd position`	\
	xargs					  `# trim spaces on either side`
}

function get_TID {
	local PROFILE=$1
	echo $(ini_get_value $CONFIG $PROFILE tenancy)
}

function oci-help {
	echo "Usage: $0 <profile> <command>"
	echo 
	echo "Example:"
	echo -e "\t$0 SEL[0-1]\|PHX[2-3] instance-list"
	echo 
	echo "Commands:"
	declare -F | awk '{print $NF}' | sort | grep -v "^_" | grep "^oci-" | sed 's/^oci-/\t/'
}

function oci-instance-list {
	local PROFILE=$1; local TID=$2
	local CMD="oci --profile $PROFILE compute instance list -c $TID --all | jq -r '.data[] | \"$PROFILE,\" + .\"display-name\" + \",\" + .id'"
	[ $VERBOSE ] && echo $CMD >&2
	eval $CMD 
}

function _oci-ip {
	local PROFILE=$1; local TID=$2; local IID=$3
	local CMD="oci --profile $PROFILE compute instance list-vnics -c $TID --instance-id $IID | jq -r '.data[] | .\"public-ip\"'"
	[ $VERBOSE ] && echo $CMD >&2;
	echo $PROFILE,$INAME,$(eval $CMD)
}

function oci-ip-list {
	local PROFILE=$1; local TID=$2; local INPUT_INAME=$3
	local SUB_PIDS=""
	[ -z $INPUT_INAME ] && INPUT_INAME='.'
	readarray -t IID_ARRAY <<<"$(oci-instance-list $PROFILE $TID)"; [ $DEBUG ] && declare -p IID_ARRAY >&2
	for line in ${IID_ARRAY[@]}; do
		[ $DEBUG ] && echo "$FUNCNAME: $line" >&2
		local INAME=$(echo $line | awk -F, '{print $2}')
		local IID=$(echo $line | awk -F, '{print $3}')
		if echo $INAME | grep -q $INPUT_INAME; then
			eval "_oci-ip $PROFILE $TID $IID" &
			SUB_PIDS="$SUB_PIDS $!"
		fi 
	done

	for pid in $SUB_PIDS; do
		wait $pid
	done
}

function _oci-ipv6 {
	local PROFILE=$1; local TID=$2; local IID=$3; local VNIC_ID=$4; local SUBNET_ID=$5
	local CMD="oci --profile $PROFILE network ipv6 list --vnic-id $VNIC_ID --subnet-id $SUBNET_ID | jq -r '.data[] | .\"ip-address\"'"
	[ $VERBOSE ] && echo $CMD >&2;
	local RESULT=$(eval $CMD)
	if [ -z $RESULT ]; then
		RESULT=$(oci --profile $PROFILE network vnic assign-ipv6 --vnic-id $VNIC_ID | jq -r '.data."ip-address"')
	fi
	echo $PROFILE,$INAME,$RESULT

}

function oci-ipv6-list {
	local PROFILE=$1; local TID=$2; local INPUT_INAME=$3
	local SUB_PIDS=""
	[ -z $INPUT_INAME ] && INPUT_INAME='.'
	readarray -t IID_ARRAY <<<"$(oci-instance-list $PROFILE $TID)"; [ $DEBUG ] && declare -p IID_ARRAY >&2

	for line in ${IID_ARRAY[@]}; do
		[ $DEBUG ] && echo "$FUNCNAME: $line" >&2
		local INAME=$(echo $line | awk -F, '{print $2}')
		local IID=$(echo $line | awk -F, '{print $3}')
		local VNIC_DATA=$(eval "oci --profile $PROFILE compute instance list-vnics -c $TID --instance-id $IID")
		local VNIC_ID=$(echo $VNIC_DATA | jq -r '.data[] | .id')
		local SUBNET_ID=$(echo $VNIC_DATA | jq -r '.data[] | ."subnet-id"')
		if echo $INAME | grep -q $INPUT_INAME; then
			eval "_oci-ipv6 $PROFILE $TID $IID $VNIC_ID $SUBNET_ID" &
			SUB_PIDS="$SUB_PIDS $!"
		fi 
	done

	for pid in $SUB_PIDS; do
		wait $pid
	done
}

function oci-change-name {
	local PROFILE=$1; local TID=$2; local INPUT_INAME=$3; local INPUT_DNAME=$4
	[ -z $INPUT_INAME ] && INPUT_INAME='.'
	[ -z $INPUT_DNAME ] && exit # TODO: error message
	readarray -t IID_ARRAY <<<"$(oci-instance-list $PROFILE $TID)"; [ $DEBUG ] && declare -p IID_ARRAY >&2
	for line in ${IID_ARRAY[@]}; do
		[ $DEBUG ] && echo "$FUNCNAME: $line" >&2
		local INAME=$(echo $line | awk -F, '{print $2}')
		local IID=$(echo $line | awk -F, '{print $3}')
		if [ "$INAME" ==  "$INPUT_INAME" ]; then
			local CMD="oci --profile $PROFILE compute instance update --instance-id $IID --display-name $INPUT_DNAME | jq -r '.data.\"display-name\"'"
			[ $VERBOSE ] && echo $CMD >&2;
			echo $PROFILE,$INAME,$(eval $CMD)
		fi 
	done
}

function oci-ip-create {
#     export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/network/public-ip/create.html#cmdoption-compartment-id
#    export lifetime=<substitute-value-of-lifetime> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/network/public-ip/create.html#cmdoption-lifetime
#    public_ip_id=$(oci network public-ip create --compartment-id $compartment_id --lifetime $lifetime --query data.id --raw-output)
#    oci network public-ip update --public-ip-id $public_ip_id
	exit
}

CONFIG=~/.oci/config
INPUT_PROFILE=$1; shift;
INPUT_COMMAND=$1; shift;

[ -z $CONFIG ] && exit # TODO: error message

declare -a PROFILE_ARRAY="$(ini_get_sections $CONFIG)"; [ $DEBUG ] && declare -p PROFILE_ARRAY; >&2

for PROFILE in ${PROFILE_ARRAY[@]}; do
	[ "$PROFILE" == "DEFAULT" ] || [ "$PROFILE" == ".oci-free" ] && continue

	[ $DEBUG ] && echo "main loop: [$PROFILE]" >&2
	if echo $PROFILE | grep -q $INPUT_PROFILE; then
		[ $VERBOSE ] && echo [$PROFILE] >&2
		TID=$(get_TID $PROFILE)
		eval "oci-$INPUT_COMMAND $PROFILE $TID $@" & # TODO: prevent background for help
		PIDS="$PIDS $!"
	fi
done

for pid in $PIDS; do
	wait $pid || let "RESULT=1"
done

if [ "$RESULT" == "1" ]; then
	exit 1
fi

# TODO: multi, single command? oci-multi-???
# TODO: dry-run option?
# TODO: unknown command --> help
# TODO: create, assign ipv4,6 address
