#!/bin/bash

set -o noglob

DEBUG=true
#VERBOSE=true

function ini_get_sections {
	local INI_FILE=$1
	readarray -t array < <(grep '^\[' $INI_FILE | uniq | tr -d '\[' | tr -d '\]')
	local result=$(declare -p array)
	echo "${result#*=}"
}

function ini_get_value {
	local INT_FILE=$1
	local SECTION=$2
	local KEY=$3
	cat $INT_FILE				| `# read all from the config file`				\
	sed -n -e "/\[$SECTION\]/,\$p"		| `# output all the rest from the desired section matched`	\
	tail -n +2				| `# delete the first line (the desired section)`		\
	sed -e "/^\[.*\]/q"			| `# find the next SECTION and discard all the rest from there`	\
	grep "^[[:space:]]*$KEY[[:space:]]*\="	| `# find all lines with desired KEY separated by equal sign.`	\
						  `# spaces around key name are not affected`			\
	tail -n 1				| `# choose the last`						\
	awk -F= '{print $2}'			| `# separate by the equal sign, get the value of 2nd position`	\
	xargs					  `# trim spaces on either side`
}

function get_TID {
	local PROFILE=$1
	echo $(ini_get_value $CONFIG $PROFILE tenancy)
}

function oci-help {
	echo "Usage: $0 <profile> <command>"
	echo 
	echo "Example:"
	echo -e "\t$0 SEL[0-1]\|PHX[2-3] instance-list"
	echo 
	echo "Commands:"
	declare -F | awk '{print $NF}' | sort | grep -v "^_" | grep "oci-" | sed 's/^oci-/\t/'
}

function oci-instance-list {
	local PROFILE=$1; local TID=$2
	local CMD="oci --profile $PROFILE compute instance list -c $TID --all | jq -r '.data[] | \"$PROFILE,\" + .\"display-name\" + \",\" + .id'"
	[ $VERBOSE ] && echo $CMD >&2
	eval $CMD 
}

function oci-ip-list {
	local PROFILE=$1; local TID=$2; local INPUT_INAME=$3
	[ -z $INPUT_INAME ] && INPUT_INAME='.'
	readarray -t IID_ARRAY <<<"$(oci-instance-list $PROFILE $TID)"; [ $DEBUG ] && declare -p IID_ARRAY >&2
	for line in ${IID_ARRAY[@]}; do
		local INAME=$(echo $line | awk -F, '{print $2}')
		local IID=$(echo $line | awk -F, '{print $3}')
		if echo $INAME | grep -q -w $INPUT_INAME; then
			local CMD="oci --profile $PROFILE compute instance list-vnics -c $TID --instance-id $IID | jq -r '.data[] | .\"public-ip\"'"
			[ $VERBOSE ] && echo $CMD >&2;
			echo -n $PROFILE,$INAME,; eval $CMD 
		fi 
	done
}

CONFIG=~/.oci/config
INPUT_PROFILE=$1; shift;
INPUT_COMMAND=$1; shift;

echo $INPUT_PROFILE

[ -z $CONFIG ] && exit # TODO: error message

declare -a PROFILE_ARRAY="$(ini_get_sections $CONFIG)"; [ $DEBUG ] && declare -p PROFILE_ARRAY; >&2

for PROFILE in ${PROFILE_ARRAY[@]}; do
	[ "$PROFILE" == "DEFAULT" ] || [ "$PROFILE" == ".oci-free" ] && continue

	[ $DEBUG ] && echo "main loop: [$PROFILE]" >&2
	if echo $PROFILE | grep -q  $INPUT_PROFILE; then
		[ $VERBOSE ] && echo [$PROFILE] >&2
		TID=$(get_TID $PROFILE)
		eval "oci-$INPUT_COMMAND $PROFILE $TID $@"
	fi
done

